import unittest
import os
import sys
import json
import datetime
from unittest.mock import patch, MagicMock, ANY
from lxml import etree

dirPath = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(dirPath)

# Change the imports to match the correct path
from src.despatch.despatchCreate import (
    addDespatchAdvice,
    getDespatchAdvice,
    generate_initial_xml,
    create_despatch_advice,
    validate_despatch_advice,
    get_despatch_xml,
    update_despatch_advice,
    delete_despatch_advice
)

class TestDespatchCreate(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self):
        self.valid_despatch_data = {
            "DespatchID": "D-12345678",
            "UUID": "660e8400-e29b-41d4-a716-446655440001",
            "OrderID": "ORD-12345",
            "Status": "Initiated",
            "SupplierInfo": {
                "is_seller": True,
                "name": "Supplier Co.",
                "contact": "John Smith"
            },
            "CustomerInfo": {
                "id": "CUST-001",
                "details": {
                    "name": "Customer Ltd.",
                    "address": "123 Main St"
                }
            },
            "CreationDate": "2025-03-16",
            "XMLData": "<DespatchAdvice>...</DespatchAdvice>",
            "LastModified": "2025-03-16T10:00:00"
        }
        
        self.valid_event_body = {
            "order_id": "ORD-12345",
            "supplier": {
                "is_seller": True,
                "name": "Supplier Co.",
                "contact": "John Smith"
            },
            "customer": {
                "id": "CUST-001",
                "details": {
                    "name": "Customer Ltd.",
                    "address": "123 Main St"
                }
            }
        }
        
        self.sample_order = {
            "OrderID": "ORD-12345",
            "UUID": "550e8400-e29b-41d4-a716-446655440000",
            "CustomerID": "CUST-001",
            "Items": [
                {"item_id": "ITEM-001", "quantity": 5, "price": 10.5},
                {"item_id": "ITEM-002", "quantity": 3, "price": 15.75}
            ],
            "Status": "Created",
            "CreationDate": "2025-03-15T10:00:00",
            "LastModified": "2025-03-15T10:00:00"
        }
        
        self.sample_xml = """<?xml version="1.0" encoding="UTF-8"?>
<DespatchAdvice xmlns="urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2"
        xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"
        xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
    <cbc:UBLVersionID>2.0</cbc:UBLVersionID>
    <cbc:CustomizationID>urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2.0:sbs-1.0-draft</cbc:CustomizationID>
    <cbc:ProfileID>bpid:oasis:names:draft:bpss:ubl-2-sbs-despatch-advice-notification-draft</cbc:ProfileID>
    <cbc:ID>D-12345678</cbc:ID>
    <cbc:CopyIndicator>false</cbc:CopyIndicator>
    <cbc:UUID>660e8400-e29b-41d4-a716-446655440001</cbc:UUID>
    <cbc:IssueDate>2025-03-16</cbc:IssueDate>
    <cbc:DocumentStatusCode>NoStatus</cbc:DocumentStatusCode>
    <cbc:DespatchAdviceTypeCode>delivery</cbc:DespatchAdviceTypeCode>
    <cbc:Note>Generated by Despatch Advice Generator</cbc:Note>
</DespatchAdvice>"""

        self.valid_despatch_data["XMLData"] = self.sample_xml
        
        self.client = MagicMock()
        self.db = MagicMock()

    async def asyncTearDown(self):
        if hasattr(self, 'client') and hasattr(self.client, 'close'):
            self.client.close()

    # Fixed patch path
    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.addOrder')
    async def test_add_despatch_advice_success(self, mock_add_order, mock_db_connect):
        mock_db_connect.return_value = (self.client, self.db)
        mock_add_order.return_value = "inserted_id"
        
        result = await addDespatchAdvice(self.valid_despatch_data)
        
        self.assertEqual(result, "inserted_id")
        mock_db_connect.assert_called_once()
        mock_add_order.assert_called_once_with(self.valid_despatch_data, self.db)
        self.client.close.assert_called_once()

    # Fixed patch path
    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.addOrder')
    async def test_add_despatch_advice_failure(self, mock_add_order, mock_db_connect):
        mock_db_connect.return_value = (self.client, self.db)
        mock_add_order.side_effect = Exception("Database error")
        
        result = await addDespatchAdvice(self.valid_despatch_data)
        
        self.assertIsNone(result)
        mock_db_connect.assert_called_once()
        mock_add_order.assert_called_once()
        self.client.close.assert_called_once()

    # Fixed patch path
    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.getOrderInfo')
    async def test_get_despatch_advice_success(self, mock_get_order_info, mock_db_connect):
        mock_db_connect.return_value = (self.client, self.db)
        mock_get_order_info.return_value = self.valid_despatch_data
        
        result = await getDespatchAdvice("D-12345678")
        
        self.assertEqual(result, self.valid_despatch_data)
        mock_db_connect.assert_called_once()
        mock_get_order_info.assert_called_once_with("D-12345678", self.db)
        self.client.close.assert_called_once()

    # Continue with other test methods and fix their patch paths similarly...
    # All methods should use 'src.despatch.despatchCreate' instead of 'src.despatchCreate'

    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.getOrderInfo')
    async def test_get_despatch_advice_failure(self, mock_get_order_info, mock_db_connect):
        mock_db_connect.return_value = (self.client, self.db)
        mock_get_order_info.side_effect = Exception("Database error")
        
        result = await getDespatchAdvice("D-12345678")
        
        self.assertIsNone(result)
        mock_db_connect.assert_called_once()
        mock_get_order_info.assert_called_once()
        self.client.close.assert_called_once()

    @patch('uuid.uuid4')
    async def test_generate_initial_xml(self, mock_uuid):
        mock_uuid.return_value = "660e8400-e29b-41d4-a716-446655440001"
        
        result = generate_initial_xml("D-12345678", "2025-03-16")
        
        self.assertIsInstance(result, str)
        
        try:
            root = etree.fromstring(result.encode('utf-8'))
            self.assertIsNotNone(root)
        except Exception as e:
            self.fail(f"Failed to parse XML: {str(e)}")
        
        self.assertIn('<cbc:ID>D-12345678</cbc:ID>', result)
        self.assertIn('<cbc:UUID>660e8400-e29b-41d4-a716-446655440001</cbc:UUID>', result)
        self.assertIn('<cbc:IssueDate>2025-03-16</cbc:IssueDate>', result)
        self.assertIn('<cbc:DocumentStatusCode>NoStatus</cbc:DocumentStatusCode>', result)
        self.assertIn('<cbc:DespatchAdviceTypeCode>delivery</cbc:DespatchAdviceTypeCode>', result)

    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.getOrderInfo')
    @patch('src.despatch.despatchCreate.addDespatchAdvice')
    @patch('uuid.uuid4')
    @patch('datetime.datetime')
    async def test_create_despatch_advice_success(self, mock_datetime, mock_uuid, mock_add_despatch, 
                                                 mock_get_order, mock_db_connect):
        mock_now = MagicMock()
        mock_now.strftime.return_value = "2025-03-16"
        mock_now.isoformat.return_value = "2025-03-16T10:00:00"
        mock_datetime.now.return_value = mock_now
        
        mock_uuid.return_value.hex = "12345678"
        mock_uuid.return_value = "660e8400-e29b-41d4-a716-446655440001"
        
        mock_db_connect.return_value = (self.client, self.db)
        mock_get_order.return_value = self.sample_order
        mock_add_despatch.return_value = "inserted_id"
        
        result = await create_despatch_advice(self.valid_event_body)
        
        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertIn("despatch_id", response_body)
        self.assertEqual(response_body["status"], "Initiated")
        self.assertIn("xml_link", response_body)
        
        mock_db_connect.assert_called_once()
        mock_get_order.assert_called_once_with("ORD-12345", self.db)
        mock_add_despatch.assert_called_once()
        self.client.close.assert_called_once()

    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.getOrderInfo')
    async def test_create_despatch_advice_missing_order_id(self, mock_get_order, mock_db_connect):
        invalid_event_body = {
            "supplier": self.valid_event_body["supplier"],
            "customer": self.valid_event_body["customer"]
        }
        
        result = await create_despatch_advice(invalid_event_body)
        
        self.assertEqual(result["statusCode"], 400)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertIn("missing order_id", response_body["error"])
        
        mock_db_connect.assert_not_called()
        mock_get_order.assert_not_called()

    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.getOrderInfo')
    async def test_create_despatch_advice_order_not_found(self, mock_get_order, mock_db_connect):
        mock_db_connect.return_value = (self.client, self.db)
        mock_get_order.return_value = None
        
        result = await create_despatch_advice(self.valid_event_body)
        
        self.assertEqual(result["statusCode"], 404)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertEqual(response_body["error"], "Order does not exist")
        
        mock_db_connect.assert_called_once()
        mock_get_order.assert_called_once_with("ORD-12345", self.db)
        self.client.close.assert_called_once()

    @patch('src.despatch.despatchCreate.dbConnect')
    @patch('src.despatch.despatchCreate.getOrderInfo')
    @patch('src.despatch.despatchCreate.addDespatchAdvice')
    @patch('uuid.uuid4')
    @patch('datetime.datetime')
    async def test_create_despatch_advice_db_failure(self, mock_datetime, mock_uuid, mock_add_despatch, 
                                                   mock_get_order, mock_db_connect):
        mock_now = MagicMock()
        mock_now.strftime.return_value = "2025-03-16"
        mock_now.isoformat.return_value = "2025-03-16T10:00:00"
        mock_datetime.now.return_value = mock_now
        
        mock_uuid.return_value.hex = "12345678"
        mock_uuid.return_value = "660e8400-e29b-41d4-a716-446655440001"
        
        mock_db_connect.return_value = (self.client, self.db)
        mock_get_order.return_value = self.sample_order
        mock_add_despatch.return_value = None
        
        result = await create_despatch_advice(self.valid_event_body)
        
        self.assertEqual(result["statusCode"], 500)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertEqual(response_body["error"], "Failed to create despatch advice")
        
        mock_db_connect.assert_called_once()
        mock_get_order.assert_called_once()
        mock_add_despatch.assert_called_once()
        self.client.close.assert_called_once()

    @patch('src.despatch.despatchCreate.getDespatchAdvice')
    async def test_validate_despatch_advice_valid(self, mock_get_despatch):
        mock_get_despatch.return_value = self.valid_despatch_data
        
        result = await validate_despatch_advice("D-12345678")
        
        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertEqual(response_body["despatch_id"], "D-12345678")
        self.assertEqual(response_body["validation_status"], "Valid")
        self.assertNotIn("issues", response_body)
        
        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_validate_despatch_advice_invalid(self, mock_get_despatch):
        invalid_despatch = self.valid_despatch_data.copy()
        invalid_despatch[
            "XMLData"
        ] = """<?xml version="1.0" encoding="UTF-8"?>
        <DespatchAdvice xmlns="urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2"
                xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"
                xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
            <!-- Missing ID and IssueDate -->
            <cbc:UBLVersionID>2.0</cbc:UBLVersionID>
            <cbc:Note>Generated by Despatch Advice Generator</cbc:Note>
        </DespatchAdvice>"""

        mock_get_despatch.return_value = invalid_despatch

        result = validate_despatch_advice("D-12345678")

        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertEqual(response_body["despatch_id"], "D-12345678")
        self.assertEqual(response_body["validation_status"], "Invalid")
        self.assertIn("issues", response_body)
        self.assertTrue(
            any(
                "Missing required element: ID" in issue
                for issue in response_body["issues"]
            )
        )

        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_validate_despatch_advice_with_warnings(self, mock_get_despatch):
        valid_with_warnings = self.valid_despatch_data.copy()

        mock_get_despatch.return_value = valid_with_warnings

        result = validate_despatch_advice("D-12345678")

        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertEqual(response_body["despatch_id"], "D-12345678")
        self.assertEqual(response_body["validation_status"], "Valid")
        self.assertIn("warnings", response_body)

        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_validate_despatch_advice_not_found(self, mock_get_despatch):
        mock_get_despatch.return_value = None

        result = validate_despatch_advice("D-NOTFOUND")

        self.assertEqual(result["statusCode"], 404)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertEqual(response_body["error"], "Despatch Advice not found")

        mock_get_despatch.assert_called_once_with("D-NOTFOUND")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_validate_despatch_advice_invalid_xml(self, mock_get_despatch):
        invalid_xml_despatch = self.valid_despatch_data.copy()
        invalid_xml_despatch["XMLData"] = "<InvalidXML>"

        mock_get_despatch.return_value = invalid_xml_despatch

        result = validate_despatch_advice("D-12345678")

        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertEqual(response_body["despatch_id"], "D-12345678")
        self.assertEqual(response_body["validation_status"], "Invalid")
        self.assertIn("issues", response_body)
        self.assertTrue(
            any("XML syntax error" in issue for issue in response_body["issues"])
        )

        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_get_despatch_xml_success(self, mock_get_despatch):
        mock_get_despatch.return_value = self.valid_despatch_data

        result = get_despatch_xml("D-12345678")

        self.assertEqual(result["statusCode"], 200)
        self.assertEqual(result["headers"]["Content-Type"], "application/xml")
        self.assertEqual(result["body"], self.valid_despatch_data["XMLData"])

        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_get_despatch_xml_not_found(self, mock_get_despatch):
        mock_get_despatch.return_value = None

        result = get_despatch_xml("D-NOTFOUND")

        self.assertEqual(result["statusCode"], 404)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertEqual(response_body["error"], "Despatch Advice not found")

        mock_get_despatch.assert_called_once_with("D-NOTFOUND")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_update_despatch_advice_missing_xml(self, mock_get_despatch):
        invalid_event_body = {}

        result = update_despatch_advice("D-12345678", invalid_event_body)

        self.assertEqual(result["statusCode"], 400)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertIn("missing xml field", response_body["error"])

        mock_get_despatch.assert_not_called()

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_update_despatch_advice_not_found(self, mock_get_despatch):
        mock_get_despatch.return_value = None

        event_body = {"xml": self.sample_xml}

        result = update_despatch_advice("D-NOTFOUND", event_body)

        self.assertEqual(result["statusCode"], 404)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertEqual(response_body["error"], "Despatch Advice not found")

        mock_get_despatch.assert_called_once_with("D-NOTFOUND")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_update_despatch_advice_invalid_xml(self, mock_get_despatch):
        mock_get_despatch.return_value = self.valid_despatch_data

        event_body = {"xml": "<InvalidXML>"}

        result = update_despatch_advice("D-12345678", event_body)

        self.assertEqual(result["statusCode"], 400)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertIn("Invalid XML", response_body["error"])

        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_update_despatch_advice_success(self, mock_get_despatch):
        mock_get_despatch.return_value = self.valid_despatch_data

        event_body = {"xml": self.sample_xml}

        result = update_despatch_advice("D-12345678", event_body)

        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertEqual(response_body["despatch_id"], "D-12345678")
        self.assertEqual(response_body["status"], "Updated")

        mock_get_despatch.assert_called_once_with("D-12345678")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_delete_despatch_advice_not_found(self, mock_get_despatch):
        mock_get_despatch.return_value = None

        result = delete_despatch_advice("D-NOTFOUND")

        self.assertEqual(result["statusCode"], 404)
        response_body = json.loads(result["body"])
        self.assertIn("error", response_body)
        self.assertEqual(response_body["error"], "Despatch Advice not found")

        mock_get_despatch.assert_called_once_with("D-NOTFOUND")

    @patch("src.despatchCreate.getDespatchAdvice")
    async def test_delete_despatch_advice_success(self, mock_get_despatch):
        mock_get_despatch.return_value = self.valid_despatch_data

        result = delete_despatch_advice("D-12345678")

        self.assertEqual(result["statusCode"], 200)
        response_body = json.loads(result["body"])
        self.assertEqual(response_body["despatch_id"], "D-12345678")
        self.assertEqual(response_body["status"], "Deleted")

        mock_get_despatch.assert_called_once_with("D-12345678")


if __name__ == "__main__":
    unittest.main()
